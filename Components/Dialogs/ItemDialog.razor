
@using HomeAssets.Entities
@using HomeAssets.Services
@implements IDialogContentComponent<Item>
@inject IToastService ToastService
@inject ILocationService LocationService
@inject ILabelService LabelService
@* Header *@
<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>
<FluentCombobox Items="@locationOptions" Label="Parent Location"
                TOption="Location"
                OptionText="@(location => location.Name)" 
                OptionValue="@(location => location.Id.ToString())" 
                @bind-SelectedOption="@selectedLocationOption"
                @bind-Value="@selectedLocationId" />

<FluentTextField @bind-value="@Content.Name" Label="Item Name" />
<FluentTextArea @bind-Value="@Content.Description" Cols="60" Label="Item Description"></FluentTextArea>


<FluentAutocomplete TOption="Label"
                    AutoComplete="off"
                    Label="Select a Labels"
                    Width="250px"
                    Placeholder="Select Labels"
                    OnOptionsSearch="@OnSearchAsync"
                    MaximumSelectedOptions="3"
                    OptionText="@(item => item.Name)"
                    @bind-SelectedOptions="@selectedLabels" />

<FluentDialogFooter>
    <FluentButton Appearance="Appearance.Accent" OnClick="@SaveAsync">Save</FluentButton>
    
</FluentDialogFooter>
     
@code{

    [Parameter]
    public Item Content { get; set; } = default;
    
    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }
    string selectedLocationId;
    Location? selectedLocationOption;
    List<Location> locationOptions = new List<Location>();
    
    
    

    IEnumerable<Label> selectedLabels = Array.Empty<Label>();

    private async Task OnSearchAsync(OptionsSearchEventArgs<Label> e)
    {
        var allLabels = await LabelService.GetAllLabelsAsync();
        e.Items = allLabels.Where(i => i.Name.StartsWith(e.Text, StringComparison.OrdinalIgnoreCase))
            .OrderBy(i => i.Name);
    }
    
    protected override async Task OnInitializedAsync()
    {
    // Fetch locations from the service when the component is initialized
        locationOptions = await LocationService.GetAllLocationsAsync();
    }

    
    
    private async Task SaveAsync()
    {
        
        if (Content is { Name: "",Description: "" })
        {
            ToastService.ShowToast(ToastIntent.Error, "Error adding Item", null, null,null);
            return;
        }
        else
        {
            
                Content.LocationId = selectedLocationOption.Id;
                Content.ItemLabels = selectedLabels
                    .Select(label => new ItemLabel { LabelId = label.Id, ItemId = Content.Id }) // Assuming LabelId and ItemId are the foreign keys
                    .ToList();

                await Dialog.CloseAsync(Content);
           
        }
    }

}