
@using HomeAssets.Services
@using HomeAssets.Entities
@using HomeAssets.Components.GlobalComponents
@using HomeAssets.DTOs
@using System.Dynamic
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@inject IItemService ItemService
<h3>Item Details</h3>

<FluentAccordion>
    @foreach (var group in detailGroups)
    {
        <DetailsSection Title="@group.Key" Details="group.Value" />
    }
</FluentAccordion>




 


@code {
   public Item item = new Item();
    private Dictionary<string, CustomItemGroup> detailGroups = new Dictionary<string, CustomItemGroup>();
    
    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        item = await ItemService.GetItemAsync(Id);
        //map item to ItemDto 
        var itemDto = new ItemDTO();
        itemDto.Name = item.Name;
        itemDto.Quantity = item.Quantity;
        itemDto.Description = item.Description;
        itemDto.PurchasePrice = item.PurchasePrice;
        itemDto.PurchaseDate = item.PurchaseDate;
        itemDto.LifetimeWarranty = item.LifetimeWarranty;
        itemDto.WarrantyDetails = item.WarrantyDetails;

        detailGroups.Add("General Details",  new CustomItemGroup{ IsExpanded = true,GroupValue =CreateGroup(itemDto,"Name", "Description","Quantity")});
        detailGroups.Add("Purchase Details",  new CustomItemGroup{ IsExpanded = false,GroupValue =CreateGroup(itemDto,"PurchasePrice", "PurchaseDate")});
        detailGroups.Add("Warranty Details",  new CustomItemGroup{ IsExpanded = false,GroupValue =CreateGroup(itemDto,"LifetimeWarranty", "WarrantyDetails")});
  
    }
    
    private object CreateGroup(object sourceObject, params string[] propertyNames)
    {
        var group = new ExpandoObject() as IDictionary<string, object>;

        foreach (var propertyName in propertyNames)
        {
            var property = sourceObject.GetType().GetProperty(propertyName);

            if (property != null)
            {
                var displayAttribute = property.GetCustomAttribute<DisplayAttribute>();
                var displayName = displayAttribute?.Name ?? propertyName;

                var propertyValue = property.GetValue(sourceObject);
                group.Add(displayName, propertyValue);
            }
        }

        return group;
    }

}